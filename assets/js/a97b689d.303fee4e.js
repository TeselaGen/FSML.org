"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[3329],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(r),m=a,d=c["".concat(l,".").concat(m)]||c[m]||f[m]||i;return r?n.createElement(d,s(s({ref:t},u),{},{components:r})):n.createElement(d,s({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},3909:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const i={title:"Parser Plugin",sidebar_position:2,slug:"/software/plugins/parser"},s="Parser Plugin",o={unversionedId:"software/plugins/parser",id:"software/plugins/parser",title:"Parser Plugin",description:"The FSML Plugin Framework provides the Parser Interface which defines the structure the plugin package must export.",source:"@site/docs/software/plugins/parser.md",sourceDirName:"software/plugins",slug:"/software/plugins/parser",permalink:"/software/plugins/parser",draft:!1,editUrl:"https://github.com/TeselaGen/fsml.org/tree/main/website/docs/software/plugins/parser.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Parser Plugin",sidebar_position:2,slug:"/software/plugins/parser"},sidebar:"tutorialSidebar",previous:{title:"Plugin Framework",permalink:"/software/plugins/"},next:{title:"Exporter Plugin",permalink:"/software/plugins/exporter"}},l={},p=[{value:"Structure",id:"structure",level:2},{value:"Parser Interface",id:"parser-interface",level:2},{value:"Template",id:"template",level:2}],u={toc:p};function f(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"parser-plugin"},"Parser Plugin"),(0,a.kt)("p",null,"The FSML Plugin Framework provides the ",(0,a.kt)("a",{parentName:"p",href:"/software/plugins/parser#parser-interface"},"Parser Interface")," which defines the structure the plugin package must export."),(0,a.kt)("h2",{id:"structure"},"Structure"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"name")," (string): An identifier for plugin."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"type")," (string): Type of the plugin. these must be one of the ",(0,a.kt)("a",{parentName:"li",href:"/software/plugins#plugin-types"},"Plugin Types")," provided by the FSML SDK."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"run")," (function): Main function of the module which takes in a file or a filepath and returns an FSML Manifest."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"isApplicable")," (function): Secondary function used to determine whether the input file has the correct format or properties to be correctly parsed by this module. It is essentially a validation function whose main utility is to prevent any attempt at parsing a file not suited for the parser.")),(0,a.kt)("h2",{id:"parser-interface"},"Parser Interface"),(0,a.kt)("p",null,"The Parser Interface extends the ",(0,a.kt)("a",{parentName:"p",href:"/software/plugins#plugin-interface"},"Plugin Interface"),". Notice how the ",(0,a.kt)("strong",{parentName:"p"},"run")," function in a Parser Plugin, extends the one from the Plugin interface into a specific set of input and output arguments, plus the additional isApplicable validation function."),(0,a.kt)("p",null,"The input to the ",(0,a.kt)("strong",{parentName:"p"},"run")," function can be either a filepath or a file data buffer or both, depending on the developer needs. For example, usually when working with the FSML CLI, the user will simply provide a filepath to where the input experimental data contents are located in the local file system. On the contrary, if the user/developer intends to leverage the FSML SDK within its own programming framework, she'll most likely benefit from passing in the data contents as a data buffer instead (e.g., from within a NodeRed Flow)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'interface IParser extends IPlugin {\n  /** Any arbitrary name */\n  name: "parserName",\n  /** Must be of type PluginTypes.PARSER */\n  type: PluginTypes.PARSER,\n  /**\n   * Receives a file as input and returns an FSML manifest (and optionally an output file).\n   */\n  run: (\n    /* Input File, either as a filepath (string) or as file data buffer (UintArray8) */\n    file: string | UintArray8,\n  ) => Promise<{\n      manifest: TManifest;\n      file?: string | UintArray8;\n    }>;\n  /* Input File, either as a filepath (string) or the file data buffer (UintArray8) */\n  isApplicable: (file: string | UintArray8) => Promise<boolean>;\n}\n')),(0,a.kt)("h2",{id:"template"},"Template"),(0,a.kt)("p",null,"Following the Plugins Framework interfaces described, we here show an example template of a Parser Plugin. that takes in a CSV file (either as a filepath or as a data buffer), parses it using any third-party npm csv reader packages and generates an FSML manifest."),(0,a.kt)("p",null,"Note that the FSML SDK provides a set of handy utility functions that help the developer in many different ways. In this example the\n",(0,a.kt)("strong",{parentName:"p"},"createTemplateForType")," function is leveraged, which generates an empty object (JSON) out of an FSML standard type imported from the FSML ",(0,a.kt)("strong",{parentName:"p"},"standard")," package."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import fsml from \"fsml\"\n\nconst templateParser: IParser = {\n  name: 'templateParser',\n  type: PluginTypes.PARSER,\n  run: async (file) => {\n    // If file is a filepath, read file's contents\n    const data: Uint8Array =\n      typeof file === 'string' ? fs.readFileSync(file) : file;\n\n    /**\n     * The FSML SDK provides the 'createTemplateForType' util function\n     * which creates an empty object FSML Manifest object.\n     */\n    const manifest: TManifest = fsml.utils.createTemplateForType(fsml.standard.Manifest);\n\n    /** The data is then feed into a common npm csv parser package which returns a JSON array of the csv rows. */\n    const rows = csvParser(data)\n\n    /** Finally, some custom function can be used to take those rows and format them as required by FSML standard. */\n    manifest.SupplementalData.data[0].rows = jsonRowsToFsml(rows)\n\n    return await Promise.resolve({ manifest });\n  },\n  isApplicable: async (file) => {\n    /** Custom validation logic should be implemented here */\n    return Promise.resolve(true)\n  },\n};\n")))}f.isMDXComponent=!0}}]);